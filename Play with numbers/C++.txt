#include <iostream>
#include <vector>

using namespace std;

// Function to count the number of inversions during the merge process
int mergeAndCount(vector<int>& arr, int l, int m, int r) {
    // Left subarray
    vector<int> left(arr.begin() + l, arr.begin() + m + 1);

    // Right subarray
    vector<int> right(arr.begin() + m + 1, arr.begin() + r + 1);

    int i = 0, j = 0, k = l, swaps = 0;

    while (i < left.size() && j < right.size()) {
        if (left[i] <= right[j])
            arr[k++] = left[i++];
        else {
            arr[k++] = right[j++];
            swaps += (m + 1) - (l + i);
        }
    }
    while (i < left.size())
        arr[k++] = left[i++];
    while (j < right.size())
        arr[k++] = right[j++];
    return swaps;
}

// Merge sort function
int mergeSortAndCount(vector<int>& arr, int l, int r) {
    // Keeps track of the inversion count at a particular node of the recursion tree
    int count = 0;

    if (l < r) {
        int m = (l + r) / 2;

        // Total inversion count = left subarray count + right subarray count + merge count

        // Left subarray count
        count += mergeSortAndCount(arr, l, m);

        // Right subarray count
        count += mergeSortAndCount(arr, m + 1, r);

        // Merge count
        count += mergeAndCount(arr, l, m, r);
    }

    return count;
}

int main() {
    vector<int> arr = {1, 20, 6, 4, 5};

    cout << mergeSortAndCount(arr, 0, arr.size() - 1) << endl;

    return 0;
}
